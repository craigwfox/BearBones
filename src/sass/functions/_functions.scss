@use "sass:math";

// ---------------------------------------------
// ======---------------------------------======
//  Mixins
// ======---------------------------------======
// ---------------------------------------------

// =====-----------------------
// Size Converters
// =====-----------------------
$browser-context: 16; // Default

@function em($pixels, $context: $browser-context) {
	@return #{math.div($pixels, $context)}em;
}

@function rem($pixels, $context: $browser-context) {
	@return #{math.div($pixels, $context)}rem;
}

// ====---------------====
// Round numbers
// ====---------------====
/// Power function
/// @param {Number} $x
/// @param {Number} $n
/// @return {Number}
@function pow($x, $n) {
	$ret: 1;

	@if $n >= 0 {
		@for $i from 1 through $n {
			$ret: $ret * $x;
		}
	} @else {
		@for $i from $n to 0 {
			$ret: math.div($ret, $x);
		}
	}

	@return $ret;
}

@function to-fixed($float, $digits: 2) {
	$sass-precision: 5;

	@if $digits > $sass-precision {
		@warn "Sass sets default precision to #{$sass-precision} digits, and there is no way to change that for now."
    + "The returned number will have #{$sass-precision} digits, even if you asked for `#{$digits}`."
    + "See https://github.com/sass/sass/issues/1122 for further informations.";
	}

	$pow: pow(10, $digits);
	@return math.div(round($float * $pow), $pow);
}

// ====---------------====
// Fluid numbers
// ====---------------====
@function flClamp(
	$min-value-in,
	$max-value-in,
	$min-vw-in: 375,
	$max-vw-in: 1440
) {
	$min-value: math.div($min-value-in, $browser-context);
	$max-value: math.div($max-value-in, $browser-context);
	$min-vw: math.div($min-vw-in, $browser-context);
	$max-vw: math.div($max-vw-in, $browser-context);

	$factor: math.div(1, ($max-vw - $min-vw)) * ($max-value - $min-value);

	$calc-value: unquote(
		"#{ to-fixed($min-value - ($min-vw * $factor)) }rem + #{ to-fixed(100vw * $factor) }"
	);

	@return clamp(
		#{if($min-value > $max-value, $max-value, $min-value)}rem,
		#{$calc-value},
		#{if($min-value > $max-value, $min-value, $max-value)}rem
	);
}
